plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "org.sonarqube" version "2.8"
    id 'jacoco'
}

group = 'br.com.codenation'
version = '0.0.1-SNAPSHOT'
description = 'TESTE'
sourceCompatibility = '11'

ext {
    queryDslVersion = '4.2.2'
    jsonWebTokenVersion = '0.9.1'
    mapStructVersion = '1.3.1.Final'
    springfoxVersion = '3.0.0'
    javaxValidationVersion = '2.0.1.Final'

}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {

    implementation(
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-data-rest',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-configuration-processor',
            "io.springfox:springfox-bean-validators:${springfoxVersion}",
            "io.springfox:springfox-boot-starter:${springfoxVersion}",
            "io.springfox:springfox-oas:${springfoxVersion}",
            "io.jsonwebtoken:jjwt:${jsonWebTokenVersion}",
            "org.mapstruct:mapstruct:$mapStructVersion",
            "com.querydsl:querydsl-core:$queryDslVersion",
            "com.querydsl:querydsl-jpa:$queryDslVersion",
    )

    runtimeOnly(
            'org.postgresql:postgresql',
            'org.springframework.boot:spring-boot-devtools',
            "javax.validation:validation-api:${javaxValidationVersion}",
    )

    compileOnly(
            "javax.validation:validation-api:${javaxValidationVersion}",
            'org.projectlombok:lombok',
            "org.mapstruct:mapstruct:${mapStructVersion}",
            "com.querydsl:querydsl-core:${queryDslVersion}",
            "com.querydsl:querydsl-jpa:${queryDslVersion}",
    )

    annotationProcessor(
            'org.projectlombok:lombok',
            "org.mapstruct:mapstruct-processor:${mapStructVersion}",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
            'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final',
            'javax.annotation:javax.annotation-api:1.3.2',
    )

    testImplementation(
            'org.junit.jupiter:junit-jupiter-api',
            'org.mockito:mockito-junit-jupiter',
            'org.junit.jupiter:junit-jupiter-engine',
            'com.h2database:h2',
            'org.springframework.security:spring-security-test',
    )

    testImplementation(
            'org.springframework.boot:spring-boot-starter-test'
    ) {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

ext {
    sonarProjectKey = 'acelera-codenation_erros-center'
}

sonarqube {
    properties {
        property "sonar.projectKey", "acelera-codenation_erros-center"
        property "sonar.organization", "samuelssantos"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv("SONAR_TOKEN")
        property 'sonar.exclusions', "/test/**"
    }
}

compileJava {
    options.compilerArgs += [
            '-Aquerydsl.includedClasses=br.com.central.errors.events.entity.Event'
    ]
}